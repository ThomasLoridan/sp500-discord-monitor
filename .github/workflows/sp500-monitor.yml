name: S&P 500 Discord Monitor

on:
  schedule:
    # Run every 30 minutes during market hours (9:30 AM - 4:00 PM ET)
    # Market hours in UTC: 14:30 - 21:00 (EST) or 13:30 - 20:00 (EDT)
    # This schedule uses EST timezone (Nov-Mar): 14:30 - 21:00 UTC
    - cron: '30,0 14-20 * * 1-5'  # Every 30 min at :00 and :30, Mon-Fri, 14:00-20:30 UTC
    - cron: '0 21 * * 1-5'         # Final run at 21:00 UTC (4:00 PM ET close)
    
    # For EDT (Daylight Saving Time, Mar-Nov), use this instead:
    # - cron: '30,0 13-19 * * 1-5'
    # - cron: '0 20 * * 1-5'
  
  # Allow manual trigger from Actions tab
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  monitor-market:
    name: Monitor S&P 500 Market
    runs-on: ubuntu-latest
    
    # Only run if it's a weekday (Mon-Fri) to avoid wasting minutes on weekends
    # Note: This is additional safety, cron already limits to Mon-Fri
    if: github.event_name == 'workflow_dispatch' || (github.event.schedule && github.event_name == 'schedule')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yfinance pandas numpy requests aiohttp lxml
      
      - name: Run S&P 500 Monitor
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          TOP_MOVER_PERCENTILE: ${{ vars.TOP_MOVER_PERCENTILE || '75.0' }}
          HISTORICAL_DAYS: ${{ vars.HISTORICAL_DAYS || '5' }}
        run: |
          echo "Starting S&P 500 Monitor..."
          echo "Time: $(date)"
          python sp500_discord_monitor.py
          echo "Monitor completed successfully"
      
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: execution-logs-${{ github.run_number }}
          path: |
            *.log
            **/*.log
          retention-days: 7
          if-no-files-found: warn
